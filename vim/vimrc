if v:progname =~? "evim"
    finish
endif

set nocompatible    " be iMproved

" Auto-install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
nnoremap <leader>n :NERDTreeToggle<CR>
Plug 'preservim/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'morhetz/gruvbox'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'vim-scripts/a.vim'
"Plug 'vim-scripts/autoload_cscope.vim'
"Plug 'erig0/cscope_dynamic'
Plug 'jlanzarotta/bufexplorer'
let g:bufExplorerVersionWarn=0
Plug 'chazy/cscope_maps'
Plug 'dense-analysis/ale'
Plug 'mg979/vim-visual-multi', {'branch': 'master'}
Plug 'vim-airline/vim-airline'
" show lint errors and warning in airline.
let g:airline#extensions#ale#enabled = 1

"""""""""" Git related plugins """"""""""
if has('nvim') || has('patch-8.0.902')
    " include asynchronous execution
    Plug 'mhinz/vim-signify'
    " default updatetime 4000ms is not good for async update
    set updatetime=100
else
    if version >= 704
        Plug 'airblade/vim-gitgutter'
    endif
endif

Plug 'tpope/vim-fugitive'
"""""""""" Undo Tree """"""""""
Plug 'mbbill/undotree'
nnoremap <F6> :UndotreeToggle<cr>

" no more need for extra backups with undotree
set nobackup

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let myUndoDir = expand('$HOME/.vim/undodir')
    if !isdirectory(myUndoDir)
        call mkdir(myUndoDir, 'p')
    endif
    let &undodir = myUndoDir
    set undofile
endif

""""""""" tmux related plugins """""""
Plug 'christoomey/vim-tmux-navigator'
" Disable tmux navigator when zooming the Vim pane
let g:tmux_navigator_disable_when_zoomed = 1
Plug 'tmux-plugins/vim-tmux'
Plug 'tmux-plugins/vim-tmux-focus-events'

" iterm2 on MacOS needs option key set as ESC+
" terminal on MacOS needs option key set as Meta
execute "set <M-h>=h"
execute "set <M-j>=j"
execute "set <M-k>=k"
execute "set <M-l>=l"
set ttimeout ttimeoutlen=50
Plug 'RyanMillerC/better-vim-tmux-resizer'
" Plug 'melonmanchan/vim-tmux-resizer'
" Plug 'roxma/vim-tmux-clipboard'

""""""""" Vim session plugin """"""""
"Plug 'xolox/vim-misc'
"Plug 'xolox/vim-session'
"
" Start new saved session with 2 ways:
"   1) by first cd to directory in terminal and open vim without arguments/files
"   2) inside vim, :Prosession <directory to save session>
" Context-switch between saved sessions with 2 ways:
"   1) cd to directory with existing saved session, open vim
"       1a) open vim in ~ will open last saved session
"   2) :Prosession <tab-completion to directory>
" Delete old sessions:
"   :ProsessionDelete <tab-completion to directory>
Plug 'tpope/vim-obsession'
Plug 'dhruvasagar/vim-prosession'
"let g:prosession_last_session_dir = '~'

""""""""" Python plugins """""""""""
"" AutoComplete for many languages
"Plug 'Valloric/YouCompleteMe'
"" close autocomplete window when done
"let g:ycm_autoclose_preview_window_after_completion=1
"" shortcut to goto definition
"map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

let g:ale_linters = {
            \   'python': ['flake8', 'pylint'],
            \}
" set 'python3' for pylint3 or 'python' for pylint (python2)
let g:ale_python_pylint_executable = 'python3'

let g:ale_fixers = {
            \   '*': ['remove_trailing_lines', 'trim_whitespace'],
            \   'python': ['black', 'autopep8', 'isort'],
            \}

" Python's indent folding
Plug 'tmhedberg/SimpylFold'
" Include __doc__ in folded preview
let g:SimpylFold_docstring_preview=1
" Python syntax
Plug 'hdima/python-syntax'


"""" PHP """"
" Plug 'StanAngeloff/php.vim'

"""" LaTeX """"
Plug 'lervag/vimtex'
" set default flavor for .tex file
let g:tex_flavor = 'xelatex'
let g:vimtex_compiler_latexmk_engines = {
            \ '_'                : '-xelatex',
            \ 'pdflatex'         : '-pdf',
            \ 'dvipdfex'         : '-pdfdvi',
            \ 'lualatex'         : '-lualatex',
            \ 'xelatex'          : '-xelatex',
            \ 'context (pdftex)' : '-pdf -pdflatex=texexec',
            \ 'context (luatex)' : '-pdf -pdflatex=context',
            \ 'context (xetex)'  : '-pdf -pdflatex=''texexec --xtx''',
            \}

" Plug 'LaTeX-Box-Team/LaTeX-Box'
" Plug 'vim-latex/vim-latex'

"""" other language support """"
" Plug 'WolfgangMehner/vim-plugins'

call plug#end()

" Update all plugins and then upgrade vim-plug
command! PU PlugUpdate | PlugUpgrade

set number relativenumber
set expandtab
set shiftwidth=4
set tabstop=4
set ignorecase
set smartcase
set autoindent
set backspace=indent,eol,start
set history=50
set ruler
set showcmd
set incsearch
set wrap linebreak nolist
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')
set splitright
set splitbelow
set mouse=a
set lazyredraw

" swapfiles unified location, mkdir if it doesn't exist
let mySwapDir = expand('$HOME/.vim/swapfiles//')
if !isdirectory(mySwapDir)
    call mkdir(mySwapDir, 'p')
endif
let &directory = mySwapDir

"ignore case for files and commands
if exists("&wildignorecase")
    set wildignorecase
endif
if has('wildmenu')
    set wildmenu
    set wildmode=list:longest,full
endif

"clipboard upgrade
if has('unnamedplus')
    set clipboard=unnamedplus
else
    set clipboard=unnamed
endif

"highlight search results
if &t_Co > 2 || has("gui_running")
    syntax on
    set hlsearch
endif

set background=dark
colorscheme gruvbox

filetype plugin indent on

"Diff modified vs original shortcut
if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
                \ | wincmd p | diffthis
endif


"ignore LaTeX-Box's indent
let s:extfname = expand("%:e")
if s:extfname ==? "tex" || s:extfname ==? "cls"
    let g:LatexBox_custom_indent='0'
endif

" <CR> redraws the screen and removes any search highlighting.
if maparg('<CR>', 'n') ==# ''
    nnoremap <silent> <CR> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><CR>
endif

" Associate .py files as python files
au BufRead,BufNewFile *.py set filetype=python

" Associate .it files as Lua files
au BufReadPost *.it set filetype=lua

" Highlight line if more than 80 characters. (Optional)
"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%81v.\+/

" If doing a diff. Upon writing changes to file, automatically update the
" differences
autocmd BufWritePost * if &diff == 1 | diffupdate | endif

" Highlight bad extra white spaces
" define BadWhitespace before using in a match
highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
set encoding=utf-8

" Use :TrimWhiteSpace to remove all BadWhiteSpace
fun! TrimWhiteSpace()
    let l:save = winsaveview()
    if version >= 800
        keeppatterns %s/\s\+$//e
    else
        %s/\s\+$//e
    endif
    call winrestview(l:save)
endfun
command TrimWhiteSpace call TrimWhiteSpace()

" Use :ToggleCursorLineCol to toggle highlights to check indents
function! ToggleCursorLineCol()
    set cursorcolumn!
    set cursorline!
endfunction
command ToggleCursorLineCol call ToggleCursorLineCol()
nnoremap <F5> :ToggleCursorLineCol<CR>

" Increment and Decrement next or previous number
function! AddSubtract(char, back)
    let pattern = &nrformats =~ 'alpha' ? '[[:alpha:][:digit:]]' : '[[:digit:]]'
    call search(pattern, 'cw' . a:back)
    execute 'normal! ' . v:count1 . a:char
    silent! call repeat#set(":\<C-u>call AddSubtract('" .a:char. "', '" .a:back. "')\<CR>")
endfunction
nnoremap <silent>         <C-a> :<C-u>call AddSubtract("\<C-a>", '')<CR>
nnoremap <silent> <Leader><C-a> :<C-u>call AddSubtract("\<C-a>", 'b')<CR>
nnoremap <silent>         <C-x> :<C-u>call AddSubtract("\<C-x>", '')<CR>
nnoremap <silent> <Leader><C-x> :<C-u>call AddSubtract("\<C-x>", 'b')<CR>

" Disable middle/third click
map <MiddleMouse> <Nop>
imap <MiddleMouse> <Nop>

